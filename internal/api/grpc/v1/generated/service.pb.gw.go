// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: internal/service.proto

/*
Package __ is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package __

import (
	"context"
	"errors"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var (
	_ codes.Code
	_ io.Reader
	_ status.Status
	_ = errors.New
	_ = runtime.String
	_ = utilities.NewDoubleArray
	_ = metadata.Join
)

func request_BlobUpload_Upload_0(ctx context.Context, marshaler runtime.Marshaler, client BlobUploadClient, req *http.Request, pathParams map[string]string) (BlobUpload_UploadClient, runtime.ServerMetadata, error) {
	var (
		protoReq BlobUploadRequest
		metadata runtime.ServerMetadata
	)
	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && !errors.Is(err, io.EOF) {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	stream, err := client.Upload(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil
}

var filter_BlobDownload_DownloadById_0 = &utilities.DoubleArray{Encoding: map[string]int{"id": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}

func request_BlobDownload_DownloadById_0(ctx context.Context, marshaler runtime.Marshaler, client BlobDownloadClient, req *http.Request, pathParams map[string]string) (BlobDownload_DownloadByIdClient, runtime.ServerMetadata, error) {
	var (
		protoReq BlobDownloadRequest
		metadata runtime.ServerMetadata
		err      error
	)
	val, ok := pathParams["id"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}
	protoReq.Id, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", err)
	}
	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_BlobDownload_DownloadById_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	stream, err := client.DownloadById(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil
}

var filter_BlobMetadata_ListMetadata_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}

func request_BlobMetadata_ListMetadata_0(ctx context.Context, marshaler runtime.Marshaler, client BlobMetadataClient, req *http.Request, pathParams map[string]string) (BlobMetadata_ListMetadataClient, runtime.ServerMetadata, error) {
	var (
		protoReq BlobMetaQuery
		metadata runtime.ServerMetadata
	)
	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_BlobMetadata_ListMetadata_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	stream, err := client.ListMetadata(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil
}

func request_BlobMetadata_GetMetadataById_0(ctx context.Context, marshaler runtime.Marshaler, client BlobMetadataClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq IdRequest
		metadata runtime.ServerMetadata
		err      error
	)
	val, ok := pathParams["id"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}
	protoReq.Id, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", err)
	}
	msg, err := client.GetMetadataById(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func local_request_BlobMetadata_GetMetadataById_0(ctx context.Context, marshaler runtime.Marshaler, server BlobMetadataServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq IdRequest
		metadata runtime.ServerMetadata
		err      error
	)
	val, ok := pathParams["id"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}
	protoReq.Id, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", err)
	}
	msg, err := server.GetMetadataById(ctx, &protoReq)
	return msg, metadata, err
}

func request_BlobMetadata_DeleteById_0(ctx context.Context, marshaler runtime.Marshaler, client BlobMetadataClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq IdRequest
		metadata runtime.ServerMetadata
		err      error
	)
	val, ok := pathParams["id"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}
	protoReq.Id, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", err)
	}
	msg, err := client.DeleteById(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func local_request_BlobMetadata_DeleteById_0(ctx context.Context, marshaler runtime.Marshaler, server BlobMetadataServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq IdRequest
		metadata runtime.ServerMetadata
		err      error
	)
	val, ok := pathParams["id"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}
	protoReq.Id, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", err)
	}
	msg, err := server.DeleteById(ctx, &protoReq)
	return msg, metadata, err
}

func request_CryptoKeyUpload_Upload_0(ctx context.Context, marshaler runtime.Marshaler, client CryptoKeyUploadClient, req *http.Request, pathParams map[string]string) (CryptoKeyUpload_UploadClient, runtime.ServerMetadata, error) {
	var (
		protoReq UploadKeyRequest
		metadata runtime.ServerMetadata
	)
	if err := marshaler.NewDecoder(req.Body).Decode(&protoReq); err != nil && !errors.Is(err, io.EOF) {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	stream, err := client.Upload(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil
}

func request_CryptoKeyDownload_DownloadById_0(ctx context.Context, marshaler runtime.Marshaler, client CryptoKeyDownloadClient, req *http.Request, pathParams map[string]string) (CryptoKeyDownload_DownloadByIdClient, runtime.ServerMetadata, error) {
	var (
		protoReq KeyDownloadRequest
		metadata runtime.ServerMetadata
		err      error
	)
	val, ok := pathParams["id"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}
	protoReq.Id, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", err)
	}
	stream, err := client.DownloadById(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil
}

var filter_CryptoKeyMetadata_ListMetadata_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}

func request_CryptoKeyMetadata_ListMetadata_0(ctx context.Context, marshaler runtime.Marshaler, client CryptoKeyMetadataClient, req *http.Request, pathParams map[string]string) (CryptoKeyMetadata_ListMetadataClient, runtime.ServerMetadata, error) {
	var (
		protoReq KeyMetadataQuery
		metadata runtime.ServerMetadata
	)
	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CryptoKeyMetadata_ListMetadata_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	stream, err := client.ListMetadata(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil
}

func request_CryptoKeyMetadata_GetMetadataById_0(ctx context.Context, marshaler runtime.Marshaler, client CryptoKeyMetadataClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq IdRequest
		metadata runtime.ServerMetadata
		err      error
	)
	val, ok := pathParams["id"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}
	protoReq.Id, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", err)
	}
	msg, err := client.GetMetadataById(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func local_request_CryptoKeyMetadata_GetMetadataById_0(ctx context.Context, marshaler runtime.Marshaler, server CryptoKeyMetadataServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq IdRequest
		metadata runtime.ServerMetadata
		err      error
	)
	val, ok := pathParams["id"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}
	protoReq.Id, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", err)
	}
	msg, err := server.GetMetadataById(ctx, &protoReq)
	return msg, metadata, err
}

func request_CryptoKeyMetadata_DeleteById_0(ctx context.Context, marshaler runtime.Marshaler, client CryptoKeyMetadataClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq IdRequest
		metadata runtime.ServerMetadata
		err      error
	)
	val, ok := pathParams["id"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}
	protoReq.Id, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", err)
	}
	msg, err := client.DeleteById(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func local_request_CryptoKeyMetadata_DeleteById_0(ctx context.Context, marshaler runtime.Marshaler, server CryptoKeyMetadataServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq IdRequest
		metadata runtime.ServerMetadata
		err      error
	)
	val, ok := pathParams["id"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}
	protoReq.Id, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", err)
	}
	msg, err := server.DeleteById(ctx, &protoReq)
	return msg, metadata, err
}

// RegisterBlobUploadHandlerServer registers the http handlers for service BlobUpload to "mux".
// UnaryRPC     :call BlobUploadServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterBlobUploadHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterBlobUploadHandlerServer(ctx context.Context, mux *runtime.ServeMux, server BlobUploadServer) error {
	mux.Handle(http.MethodPost, pattern_BlobUpload_Upload_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
		return
	})

	return nil
}

// RegisterBlobDownloadHandlerServer registers the http handlers for service BlobDownload to "mux".
// UnaryRPC     :call BlobDownloadServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterBlobDownloadHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterBlobDownloadHandlerServer(ctx context.Context, mux *runtime.ServeMux, server BlobDownloadServer) error {
	mux.Handle(http.MethodGet, pattern_BlobDownload_DownloadById_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
		return
	})

	return nil
}

// RegisterBlobMetadataHandlerServer registers the http handlers for service BlobMetadata to "mux".
// UnaryRPC     :call BlobMetadataServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterBlobMetadataHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterBlobMetadataHandlerServer(ctx context.Context, mux *runtime.ServeMux, server BlobMetadataServer) error {
	mux.Handle(http.MethodGet, pattern_BlobMetadata_ListMetadata_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
		return
	})
	mux.Handle(http.MethodGet, pattern_BlobMetadata_GetMetadataById_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateIncomingContext(ctx, mux, req, "/internal.BlobMetadata/GetMetadataById", runtime.WithHTTPPathPattern("/api/v1/cvs/blobs/{id}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_BlobMetadata_GetMetadataById_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_BlobMetadata_GetMetadataById_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	mux.Handle(http.MethodDelete, pattern_BlobMetadata_DeleteById_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateIncomingContext(ctx, mux, req, "/internal.BlobMetadata/DeleteById", runtime.WithHTTPPathPattern("/api/v1/cvs/blobs/{id}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_BlobMetadata_DeleteById_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_BlobMetadata_DeleteById_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})

	return nil
}

// RegisterCryptoKeyUploadHandlerServer registers the http handlers for service CryptoKeyUpload to "mux".
// UnaryRPC     :call CryptoKeyUploadServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterCryptoKeyUploadHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterCryptoKeyUploadHandlerServer(ctx context.Context, mux *runtime.ServeMux, server CryptoKeyUploadServer) error {
	mux.Handle(http.MethodPost, pattern_CryptoKeyUpload_Upload_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
		return
	})

	return nil
}

// RegisterCryptoKeyDownloadHandlerServer registers the http handlers for service CryptoKeyDownload to "mux".
// UnaryRPC     :call CryptoKeyDownloadServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterCryptoKeyDownloadHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterCryptoKeyDownloadHandlerServer(ctx context.Context, mux *runtime.ServeMux, server CryptoKeyDownloadServer) error {
	mux.Handle(http.MethodGet, pattern_CryptoKeyDownload_DownloadById_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
		return
	})

	return nil
}

// RegisterCryptoKeyMetadataHandlerServer registers the http handlers for service CryptoKeyMetadata to "mux".
// UnaryRPC     :call CryptoKeyMetadataServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterCryptoKeyMetadataHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterCryptoKeyMetadataHandlerServer(ctx context.Context, mux *runtime.ServeMux, server CryptoKeyMetadataServer) error {
	mux.Handle(http.MethodGet, pattern_CryptoKeyMetadata_ListMetadata_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
		return
	})
	mux.Handle(http.MethodGet, pattern_CryptoKeyMetadata_GetMetadataById_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateIncomingContext(ctx, mux, req, "/internal.CryptoKeyMetadata/GetMetadataById", runtime.WithHTTPPathPattern("/api/v1/cvs/keys/{id}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CryptoKeyMetadata_GetMetadataById_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_CryptoKeyMetadata_GetMetadataById_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	mux.Handle(http.MethodDelete, pattern_CryptoKeyMetadata_DeleteById_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateIncomingContext(ctx, mux, req, "/internal.CryptoKeyMetadata/DeleteById", runtime.WithHTTPPathPattern("/api/v1/cvs/keys/{id}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CryptoKeyMetadata_DeleteById_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_CryptoKeyMetadata_DeleteById_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})

	return nil
}

// RegisterBlobUploadHandlerFromEndpoint is same as RegisterBlobUploadHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterBlobUploadHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterBlobUploadHandler(ctx, mux, conn)
}

// RegisterBlobUploadHandler registers the http handlers for service BlobUpload to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterBlobUploadHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterBlobUploadHandlerClient(ctx, mux, NewBlobUploadClient(conn))
}

// RegisterBlobUploadHandlerClient registers the http handlers for service BlobUpload
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "BlobUploadClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "BlobUploadClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "BlobUploadClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterBlobUploadHandlerClient(ctx context.Context, mux *runtime.ServeMux, client BlobUploadClient) error {
	mux.Handle(http.MethodPost, pattern_BlobUpload_Upload_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/internal.BlobUpload/Upload", runtime.WithHTTPPathPattern("/api/v1/cvs/blobs"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_BlobUpload_Upload_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_BlobUpload_Upload_0(annotatedContext, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_BlobUpload_Upload_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"api", "v1", "cvs", "blobs"}, ""))
)

var (
	forward_BlobUpload_Upload_0 = runtime.ForwardResponseStream
)

// RegisterBlobDownloadHandlerFromEndpoint is same as RegisterBlobDownloadHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterBlobDownloadHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterBlobDownloadHandler(ctx, mux, conn)
}

// RegisterBlobDownloadHandler registers the http handlers for service BlobDownload to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterBlobDownloadHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterBlobDownloadHandlerClient(ctx, mux, NewBlobDownloadClient(conn))
}

// RegisterBlobDownloadHandlerClient registers the http handlers for service BlobDownload
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "BlobDownloadClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "BlobDownloadClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "BlobDownloadClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterBlobDownloadHandlerClient(ctx context.Context, mux *runtime.ServeMux, client BlobDownloadClient) error {
	mux.Handle(http.MethodGet, pattern_BlobDownload_DownloadById_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/internal.BlobDownload/DownloadById", runtime.WithHTTPPathPattern("/api/v1/cvs/blobs/{id}/file"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_BlobDownload_DownloadById_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_BlobDownload_DownloadById_0(annotatedContext, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_BlobDownload_DownloadById_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 1, 0, 4, 1, 5, 4, 2, 5}, []string{"api", "v1", "cvs", "blobs", "id", "file"}, ""))
)

var (
	forward_BlobDownload_DownloadById_0 = runtime.ForwardResponseStream
)

// RegisterBlobMetadataHandlerFromEndpoint is same as RegisterBlobMetadataHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterBlobMetadataHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterBlobMetadataHandler(ctx, mux, conn)
}

// RegisterBlobMetadataHandler registers the http handlers for service BlobMetadata to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterBlobMetadataHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterBlobMetadataHandlerClient(ctx, mux, NewBlobMetadataClient(conn))
}

// RegisterBlobMetadataHandlerClient registers the http handlers for service BlobMetadata
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "BlobMetadataClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "BlobMetadataClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "BlobMetadataClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterBlobMetadataHandlerClient(ctx context.Context, mux *runtime.ServeMux, client BlobMetadataClient) error {
	mux.Handle(http.MethodGet, pattern_BlobMetadata_ListMetadata_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/internal.BlobMetadata/ListMetadata", runtime.WithHTTPPathPattern("/api/v1/cvs/blobs"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_BlobMetadata_ListMetadata_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_BlobMetadata_ListMetadata_0(annotatedContext, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)
	})
	mux.Handle(http.MethodGet, pattern_BlobMetadata_GetMetadataById_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/internal.BlobMetadata/GetMetadataById", runtime.WithHTTPPathPattern("/api/v1/cvs/blobs/{id}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_BlobMetadata_GetMetadataById_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_BlobMetadata_GetMetadataById_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	mux.Handle(http.MethodDelete, pattern_BlobMetadata_DeleteById_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/internal.BlobMetadata/DeleteById", runtime.WithHTTPPathPattern("/api/v1/cvs/blobs/{id}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_BlobMetadata_DeleteById_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_BlobMetadata_DeleteById_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_BlobMetadata_ListMetadata_0    = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"api", "v1", "cvs", "blobs"}, ""))
	pattern_BlobMetadata_GetMetadataById_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 1, 0, 4, 1, 5, 4}, []string{"api", "v1", "cvs", "blobs", "id"}, ""))
	pattern_BlobMetadata_DeleteById_0      = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 1, 0, 4, 1, 5, 4}, []string{"api", "v1", "cvs", "blobs", "id"}, ""))
)

var (
	forward_BlobMetadata_ListMetadata_0    = runtime.ForwardResponseStream
	forward_BlobMetadata_GetMetadataById_0 = runtime.ForwardResponseMessage
	forward_BlobMetadata_DeleteById_0      = runtime.ForwardResponseMessage
)

// RegisterCryptoKeyUploadHandlerFromEndpoint is same as RegisterCryptoKeyUploadHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterCryptoKeyUploadHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterCryptoKeyUploadHandler(ctx, mux, conn)
}

// RegisterCryptoKeyUploadHandler registers the http handlers for service CryptoKeyUpload to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterCryptoKeyUploadHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterCryptoKeyUploadHandlerClient(ctx, mux, NewCryptoKeyUploadClient(conn))
}

// RegisterCryptoKeyUploadHandlerClient registers the http handlers for service CryptoKeyUpload
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "CryptoKeyUploadClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "CryptoKeyUploadClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "CryptoKeyUploadClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterCryptoKeyUploadHandlerClient(ctx context.Context, mux *runtime.ServeMux, client CryptoKeyUploadClient) error {
	mux.Handle(http.MethodPost, pattern_CryptoKeyUpload_Upload_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/internal.CryptoKeyUpload/Upload", runtime.WithHTTPPathPattern("/api/v1/cvs/keys"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CryptoKeyUpload_Upload_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_CryptoKeyUpload_Upload_0(annotatedContext, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_CryptoKeyUpload_Upload_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"api", "v1", "cvs", "keys"}, ""))
)

var (
	forward_CryptoKeyUpload_Upload_0 = runtime.ForwardResponseStream
)

// RegisterCryptoKeyDownloadHandlerFromEndpoint is same as RegisterCryptoKeyDownloadHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterCryptoKeyDownloadHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterCryptoKeyDownloadHandler(ctx, mux, conn)
}

// RegisterCryptoKeyDownloadHandler registers the http handlers for service CryptoKeyDownload to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterCryptoKeyDownloadHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterCryptoKeyDownloadHandlerClient(ctx, mux, NewCryptoKeyDownloadClient(conn))
}

// RegisterCryptoKeyDownloadHandlerClient registers the http handlers for service CryptoKeyDownload
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "CryptoKeyDownloadClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "CryptoKeyDownloadClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "CryptoKeyDownloadClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterCryptoKeyDownloadHandlerClient(ctx context.Context, mux *runtime.ServeMux, client CryptoKeyDownloadClient) error {
	mux.Handle(http.MethodGet, pattern_CryptoKeyDownload_DownloadById_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/internal.CryptoKeyDownload/DownloadById", runtime.WithHTTPPathPattern("/api/v1/cvs/keys/{id}/file"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CryptoKeyDownload_DownloadById_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_CryptoKeyDownload_DownloadById_0(annotatedContext, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_CryptoKeyDownload_DownloadById_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 1, 0, 4, 1, 5, 4, 2, 5}, []string{"api", "v1", "cvs", "keys", "id", "file"}, ""))
)

var (
	forward_CryptoKeyDownload_DownloadById_0 = runtime.ForwardResponseStream
)

// RegisterCryptoKeyMetadataHandlerFromEndpoint is same as RegisterCryptoKeyMetadataHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterCryptoKeyMetadataHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterCryptoKeyMetadataHandler(ctx, mux, conn)
}

// RegisterCryptoKeyMetadataHandler registers the http handlers for service CryptoKeyMetadata to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterCryptoKeyMetadataHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterCryptoKeyMetadataHandlerClient(ctx, mux, NewCryptoKeyMetadataClient(conn))
}

// RegisterCryptoKeyMetadataHandlerClient registers the http handlers for service CryptoKeyMetadata
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "CryptoKeyMetadataClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "CryptoKeyMetadataClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "CryptoKeyMetadataClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterCryptoKeyMetadataHandlerClient(ctx context.Context, mux *runtime.ServeMux, client CryptoKeyMetadataClient) error {
	mux.Handle(http.MethodGet, pattern_CryptoKeyMetadata_ListMetadata_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/internal.CryptoKeyMetadata/ListMetadata", runtime.WithHTTPPathPattern("/api/v1/cvs/keys"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CryptoKeyMetadata_ListMetadata_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_CryptoKeyMetadata_ListMetadata_0(annotatedContext, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)
	})
	mux.Handle(http.MethodGet, pattern_CryptoKeyMetadata_GetMetadataById_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/internal.CryptoKeyMetadata/GetMetadataById", runtime.WithHTTPPathPattern("/api/v1/cvs/keys/{id}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CryptoKeyMetadata_GetMetadataById_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_CryptoKeyMetadata_GetMetadataById_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	mux.Handle(http.MethodDelete, pattern_CryptoKeyMetadata_DeleteById_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/internal.CryptoKeyMetadata/DeleteById", runtime.WithHTTPPathPattern("/api/v1/cvs/keys/{id}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CryptoKeyMetadata_DeleteById_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_CryptoKeyMetadata_DeleteById_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_CryptoKeyMetadata_ListMetadata_0    = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"api", "v1", "cvs", "keys"}, ""))
	pattern_CryptoKeyMetadata_GetMetadataById_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 1, 0, 4, 1, 5, 4}, []string{"api", "v1", "cvs", "keys", "id"}, ""))
	pattern_CryptoKeyMetadata_DeleteById_0      = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 1, 0, 4, 1, 5, 4}, []string{"api", "v1", "cvs", "keys", "id"}, ""))
)

var (
	forward_CryptoKeyMetadata_ListMetadata_0    = runtime.ForwardResponseStream
	forward_CryptoKeyMetadata_GetMetadataById_0 = runtime.ForwardResponseMessage
	forward_CryptoKeyMetadata_DeleteById_0      = runtime.ForwardResponseMessage
)
