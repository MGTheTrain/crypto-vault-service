// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlobUpload_Upload_FullMethodName = "/BlobUpload/Upload"
)

// BlobUploadClient is the client API for BlobUpload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlobUploadClient interface {
	Upload(ctx context.Context, in *BlobUploadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlobMetaResponse], error)
}

type blobUploadClient struct {
	cc grpc.ClientConnInterface
}

func NewBlobUploadClient(cc grpc.ClientConnInterface) BlobUploadClient {
	return &blobUploadClient{cc}
}

func (c *blobUploadClient) Upload(ctx context.Context, in *BlobUploadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlobMetaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlobUpload_ServiceDesc.Streams[0], BlobUpload_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BlobUploadRequest, BlobMetaResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlobUpload_UploadClient = grpc.ServerStreamingClient[BlobMetaResponse]

// BlobUploadServer is the server API for BlobUpload service.
// All implementations must embed UnimplementedBlobUploadServer
// for forward compatibility.
type BlobUploadServer interface {
	Upload(*BlobUploadRequest, grpc.ServerStreamingServer[BlobMetaResponse]) error
	mustEmbedUnimplementedBlobUploadServer()
}

// UnimplementedBlobUploadServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlobUploadServer struct{}

func (UnimplementedBlobUploadServer) Upload(*BlobUploadRequest, grpc.ServerStreamingServer[BlobMetaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedBlobUploadServer) mustEmbedUnimplementedBlobUploadServer() {}
func (UnimplementedBlobUploadServer) testEmbeddedByValue()                    {}

// UnsafeBlobUploadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlobUploadServer will
// result in compilation errors.
type UnsafeBlobUploadServer interface {
	mustEmbedUnimplementedBlobUploadServer()
}

func RegisterBlobUploadServer(s grpc.ServiceRegistrar, srv BlobUploadServer) {
	// If the following call pancis, it indicates UnimplementedBlobUploadServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlobUpload_ServiceDesc, srv)
}

func _BlobUpload_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlobUploadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobUploadServer).Upload(m, &grpc.GenericServerStream[BlobUploadRequest, BlobMetaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlobUpload_UploadServer = grpc.ServerStreamingServer[BlobMetaResponse]

// BlobUpload_ServiceDesc is the grpc.ServiceDesc for BlobUpload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlobUpload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlobUpload",
	HandlerType: (*BlobUploadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _BlobUpload_Upload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

const (
	BlobDownload_DownloadById_FullMethodName = "/BlobDownload/DownloadById"
)

// BlobDownloadClient is the client API for BlobDownload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlobDownloadClient interface {
	DownloadById(ctx context.Context, in *BlobDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlobContent], error)
}

type blobDownloadClient struct {
	cc grpc.ClientConnInterface
}

func NewBlobDownloadClient(cc grpc.ClientConnInterface) BlobDownloadClient {
	return &blobDownloadClient{cc}
}

func (c *blobDownloadClient) DownloadById(ctx context.Context, in *BlobDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlobContent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlobDownload_ServiceDesc.Streams[0], BlobDownload_DownloadById_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BlobDownloadRequest, BlobContent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlobDownload_DownloadByIdClient = grpc.ServerStreamingClient[BlobContent]

// BlobDownloadServer is the server API for BlobDownload service.
// All implementations must embed UnimplementedBlobDownloadServer
// for forward compatibility.
type BlobDownloadServer interface {
	DownloadById(*BlobDownloadRequest, grpc.ServerStreamingServer[BlobContent]) error
	mustEmbedUnimplementedBlobDownloadServer()
}

// UnimplementedBlobDownloadServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlobDownloadServer struct{}

func (UnimplementedBlobDownloadServer) DownloadById(*BlobDownloadRequest, grpc.ServerStreamingServer[BlobContent]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadById not implemented")
}
func (UnimplementedBlobDownloadServer) mustEmbedUnimplementedBlobDownloadServer() {}
func (UnimplementedBlobDownloadServer) testEmbeddedByValue()                      {}

// UnsafeBlobDownloadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlobDownloadServer will
// result in compilation errors.
type UnsafeBlobDownloadServer interface {
	mustEmbedUnimplementedBlobDownloadServer()
}

func RegisterBlobDownloadServer(s grpc.ServiceRegistrar, srv BlobDownloadServer) {
	// If the following call pancis, it indicates UnimplementedBlobDownloadServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlobDownload_ServiceDesc, srv)
}

func _BlobDownload_DownloadById_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlobDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobDownloadServer).DownloadById(m, &grpc.GenericServerStream[BlobDownloadRequest, BlobContent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlobDownload_DownloadByIdServer = grpc.ServerStreamingServer[BlobContent]

// BlobDownload_ServiceDesc is the grpc.ServiceDesc for BlobDownload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlobDownload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlobDownload",
	HandlerType: (*BlobDownloadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadById",
			Handler:       _BlobDownload_DownloadById_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

const (
	BlobMetadata_ListMetadata_FullMethodName    = "/BlobMetadata/ListMetadata"
	BlobMetadata_GetMetadataById_FullMethodName = "/BlobMetadata/GetMetadataById"
	BlobMetadata_DeleteById_FullMethodName      = "/BlobMetadata/DeleteById"
)

// BlobMetadataClient is the client API for BlobMetadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlobMetadataClient interface {
	ListMetadata(ctx context.Context, in *BlobMetaQuery, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlobMetaResponse], error)
	GetMetadataById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BlobMetaResponse, error)
	DeleteById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type blobMetadataClient struct {
	cc grpc.ClientConnInterface
}

func NewBlobMetadataClient(cc grpc.ClientConnInterface) BlobMetadataClient {
	return &blobMetadataClient{cc}
}

func (c *blobMetadataClient) ListMetadata(ctx context.Context, in *BlobMetaQuery, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlobMetaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlobMetadata_ServiceDesc.Streams[0], BlobMetadata_ListMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BlobMetaQuery, BlobMetaResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlobMetadata_ListMetadataClient = grpc.ServerStreamingClient[BlobMetaResponse]

func (c *blobMetadataClient) GetMetadataById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BlobMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlobMetaResponse)
	err := c.cc.Invoke(ctx, BlobMetadata_GetMetadataById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobMetadataClient) DeleteById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, BlobMetadata_DeleteById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlobMetadataServer is the server API for BlobMetadata service.
// All implementations must embed UnimplementedBlobMetadataServer
// for forward compatibility.
type BlobMetadataServer interface {
	ListMetadata(*BlobMetaQuery, grpc.ServerStreamingServer[BlobMetaResponse]) error
	GetMetadataById(context.Context, *IdRequest) (*BlobMetaResponse, error)
	DeleteById(context.Context, *IdRequest) (*InfoResponse, error)
	mustEmbedUnimplementedBlobMetadataServer()
}

// UnimplementedBlobMetadataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlobMetadataServer struct{}

func (UnimplementedBlobMetadataServer) ListMetadata(*BlobMetaQuery, grpc.ServerStreamingServer[BlobMetaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListMetadata not implemented")
}
func (UnimplementedBlobMetadataServer) GetMetadataById(context.Context, *IdRequest) (*BlobMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataById not implemented")
}
func (UnimplementedBlobMetadataServer) DeleteById(context.Context, *IdRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (UnimplementedBlobMetadataServer) mustEmbedUnimplementedBlobMetadataServer() {}
func (UnimplementedBlobMetadataServer) testEmbeddedByValue()                      {}

// UnsafeBlobMetadataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlobMetadataServer will
// result in compilation errors.
type UnsafeBlobMetadataServer interface {
	mustEmbedUnimplementedBlobMetadataServer()
}

func RegisterBlobMetadataServer(s grpc.ServiceRegistrar, srv BlobMetadataServer) {
	// If the following call pancis, it indicates UnimplementedBlobMetadataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlobMetadata_ServiceDesc, srv)
}

func _BlobMetadata_ListMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlobMetaQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobMetadataServer).ListMetadata(m, &grpc.GenericServerStream[BlobMetaQuery, BlobMetaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlobMetadata_ListMetadataServer = grpc.ServerStreamingServer[BlobMetaResponse]

func _BlobMetadata_GetMetadataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobMetadataServer).GetMetadataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlobMetadata_GetMetadataById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobMetadataServer).GetMetadataById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlobMetadata_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobMetadataServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlobMetadata_DeleteById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobMetadataServer).DeleteById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlobMetadata_ServiceDesc is the grpc.ServiceDesc for BlobMetadata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlobMetadata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlobMetadata",
	HandlerType: (*BlobMetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadataById",
			Handler:    _BlobMetadata_GetMetadataById_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _BlobMetadata_DeleteById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMetadata",
			Handler:       _BlobMetadata_ListMetadata_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

const (
	CryptoKeyUpload_Upload_FullMethodName = "/CryptoKeyUpload/Upload"
)

// CryptoKeyUploadClient is the client API for CryptoKeyUpload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoKeyUploadClient interface {
	Upload(ctx context.Context, in *UploadKeyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CryptoKeyMetaResponse], error)
}

type cryptoKeyUploadClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoKeyUploadClient(cc grpc.ClientConnInterface) CryptoKeyUploadClient {
	return &cryptoKeyUploadClient{cc}
}

func (c *cryptoKeyUploadClient) Upload(ctx context.Context, in *UploadKeyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CryptoKeyMetaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CryptoKeyUpload_ServiceDesc.Streams[0], CryptoKeyUpload_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadKeyRequest, CryptoKeyMetaResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CryptoKeyUpload_UploadClient = grpc.ServerStreamingClient[CryptoKeyMetaResponse]

// CryptoKeyUploadServer is the server API for CryptoKeyUpload service.
// All implementations must embed UnimplementedCryptoKeyUploadServer
// for forward compatibility.
type CryptoKeyUploadServer interface {
	Upload(*UploadKeyRequest, grpc.ServerStreamingServer[CryptoKeyMetaResponse]) error
	mustEmbedUnimplementedCryptoKeyUploadServer()
}

// UnimplementedCryptoKeyUploadServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCryptoKeyUploadServer struct{}

func (UnimplementedCryptoKeyUploadServer) Upload(*UploadKeyRequest, grpc.ServerStreamingServer[CryptoKeyMetaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedCryptoKeyUploadServer) mustEmbedUnimplementedCryptoKeyUploadServer() {}
func (UnimplementedCryptoKeyUploadServer) testEmbeddedByValue()                         {}

// UnsafeCryptoKeyUploadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoKeyUploadServer will
// result in compilation errors.
type UnsafeCryptoKeyUploadServer interface {
	mustEmbedUnimplementedCryptoKeyUploadServer()
}

func RegisterCryptoKeyUploadServer(s grpc.ServiceRegistrar, srv CryptoKeyUploadServer) {
	// If the following call pancis, it indicates UnimplementedCryptoKeyUploadServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CryptoKeyUpload_ServiceDesc, srv)
}

func _CryptoKeyUpload_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UploadKeyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CryptoKeyUploadServer).Upload(m, &grpc.GenericServerStream[UploadKeyRequest, CryptoKeyMetaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CryptoKeyUpload_UploadServer = grpc.ServerStreamingServer[CryptoKeyMetaResponse]

// CryptoKeyUpload_ServiceDesc is the grpc.ServiceDesc for CryptoKeyUpload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoKeyUpload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CryptoKeyUpload",
	HandlerType: (*CryptoKeyUploadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _CryptoKeyUpload_Upload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

const (
	CryptoKeyDownload_DownloadById_FullMethodName = "/CryptoKeyDownload/DownloadById"
)

// CryptoKeyDownloadClient is the client API for CryptoKeyDownload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoKeyDownloadClient interface {
	DownloadById(ctx context.Context, in *KeyDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KeyContent], error)
}

type cryptoKeyDownloadClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoKeyDownloadClient(cc grpc.ClientConnInterface) CryptoKeyDownloadClient {
	return &cryptoKeyDownloadClient{cc}
}

func (c *cryptoKeyDownloadClient) DownloadById(ctx context.Context, in *KeyDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KeyContent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CryptoKeyDownload_ServiceDesc.Streams[0], CryptoKeyDownload_DownloadById_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[KeyDownloadRequest, KeyContent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CryptoKeyDownload_DownloadByIdClient = grpc.ServerStreamingClient[KeyContent]

// CryptoKeyDownloadServer is the server API for CryptoKeyDownload service.
// All implementations must embed UnimplementedCryptoKeyDownloadServer
// for forward compatibility.
type CryptoKeyDownloadServer interface {
	DownloadById(*KeyDownloadRequest, grpc.ServerStreamingServer[KeyContent]) error
	mustEmbedUnimplementedCryptoKeyDownloadServer()
}

// UnimplementedCryptoKeyDownloadServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCryptoKeyDownloadServer struct{}

func (UnimplementedCryptoKeyDownloadServer) DownloadById(*KeyDownloadRequest, grpc.ServerStreamingServer[KeyContent]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadById not implemented")
}
func (UnimplementedCryptoKeyDownloadServer) mustEmbedUnimplementedCryptoKeyDownloadServer() {}
func (UnimplementedCryptoKeyDownloadServer) testEmbeddedByValue()                           {}

// UnsafeCryptoKeyDownloadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoKeyDownloadServer will
// result in compilation errors.
type UnsafeCryptoKeyDownloadServer interface {
	mustEmbedUnimplementedCryptoKeyDownloadServer()
}

func RegisterCryptoKeyDownloadServer(s grpc.ServiceRegistrar, srv CryptoKeyDownloadServer) {
	// If the following call pancis, it indicates UnimplementedCryptoKeyDownloadServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CryptoKeyDownload_ServiceDesc, srv)
}

func _CryptoKeyDownload_DownloadById_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KeyDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CryptoKeyDownloadServer).DownloadById(m, &grpc.GenericServerStream[KeyDownloadRequest, KeyContent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CryptoKeyDownload_DownloadByIdServer = grpc.ServerStreamingServer[KeyContent]

// CryptoKeyDownload_ServiceDesc is the grpc.ServiceDesc for CryptoKeyDownload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoKeyDownload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CryptoKeyDownload",
	HandlerType: (*CryptoKeyDownloadServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadById",
			Handler:       _CryptoKeyDownload_DownloadById_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

const (
	CryptoKeyMetadata_ListMetadata_FullMethodName    = "/CryptoKeyMetadata/ListMetadata"
	CryptoKeyMetadata_GetMetadataById_FullMethodName = "/CryptoKeyMetadata/GetMetadataById"
	CryptoKeyMetadata_DeleteById_FullMethodName      = "/CryptoKeyMetadata/DeleteById"
)

// CryptoKeyMetadataClient is the client API for CryptoKeyMetadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoKeyMetadataClient interface {
	ListMetadata(ctx context.Context, in *KeyMetadataQuery, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CryptoKeyMetaResponse], error)
	GetMetadataById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CryptoKeyMetaResponse, error)
	DeleteById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type cryptoKeyMetadataClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoKeyMetadataClient(cc grpc.ClientConnInterface) CryptoKeyMetadataClient {
	return &cryptoKeyMetadataClient{cc}
}

func (c *cryptoKeyMetadataClient) ListMetadata(ctx context.Context, in *KeyMetadataQuery, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CryptoKeyMetaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CryptoKeyMetadata_ServiceDesc.Streams[0], CryptoKeyMetadata_ListMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[KeyMetadataQuery, CryptoKeyMetaResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CryptoKeyMetadata_ListMetadataClient = grpc.ServerStreamingClient[CryptoKeyMetaResponse]

func (c *cryptoKeyMetadataClient) GetMetadataById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CryptoKeyMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CryptoKeyMetaResponse)
	err := c.cc.Invoke(ctx, CryptoKeyMetadata_GetMetadataById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoKeyMetadataClient) DeleteById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, CryptoKeyMetadata_DeleteById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoKeyMetadataServer is the server API for CryptoKeyMetadata service.
// All implementations must embed UnimplementedCryptoKeyMetadataServer
// for forward compatibility.
type CryptoKeyMetadataServer interface {
	ListMetadata(*KeyMetadataQuery, grpc.ServerStreamingServer[CryptoKeyMetaResponse]) error
	GetMetadataById(context.Context, *IdRequest) (*CryptoKeyMetaResponse, error)
	DeleteById(context.Context, *IdRequest) (*InfoResponse, error)
	mustEmbedUnimplementedCryptoKeyMetadataServer()
}

// UnimplementedCryptoKeyMetadataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCryptoKeyMetadataServer struct{}

func (UnimplementedCryptoKeyMetadataServer) ListMetadata(*KeyMetadataQuery, grpc.ServerStreamingServer[CryptoKeyMetaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListMetadata not implemented")
}
func (UnimplementedCryptoKeyMetadataServer) GetMetadataById(context.Context, *IdRequest) (*CryptoKeyMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataById not implemented")
}
func (UnimplementedCryptoKeyMetadataServer) DeleteById(context.Context, *IdRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (UnimplementedCryptoKeyMetadataServer) mustEmbedUnimplementedCryptoKeyMetadataServer() {}
func (UnimplementedCryptoKeyMetadataServer) testEmbeddedByValue()                           {}

// UnsafeCryptoKeyMetadataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoKeyMetadataServer will
// result in compilation errors.
type UnsafeCryptoKeyMetadataServer interface {
	mustEmbedUnimplementedCryptoKeyMetadataServer()
}

func RegisterCryptoKeyMetadataServer(s grpc.ServiceRegistrar, srv CryptoKeyMetadataServer) {
	// If the following call pancis, it indicates UnimplementedCryptoKeyMetadataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CryptoKeyMetadata_ServiceDesc, srv)
}

func _CryptoKeyMetadata_ListMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KeyMetadataQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CryptoKeyMetadataServer).ListMetadata(m, &grpc.GenericServerStream[KeyMetadataQuery, CryptoKeyMetaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CryptoKeyMetadata_ListMetadataServer = grpc.ServerStreamingServer[CryptoKeyMetaResponse]

func _CryptoKeyMetadata_GetMetadataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoKeyMetadataServer).GetMetadataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoKeyMetadata_GetMetadataById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoKeyMetadataServer).GetMetadataById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoKeyMetadata_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoKeyMetadataServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoKeyMetadata_DeleteById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoKeyMetadataServer).DeleteById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptoKeyMetadata_ServiceDesc is the grpc.ServiceDesc for CryptoKeyMetadata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoKeyMetadata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CryptoKeyMetadata",
	HandlerType: (*CryptoKeyMetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadataById",
			Handler:    _CryptoKeyMetadata_GetMetadataById_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _CryptoKeyMetadata_DeleteById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMetadata",
			Handler:       _CryptoKeyMetadata_ListMetadata_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
