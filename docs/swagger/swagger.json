{
    "swagger": "2.0",
    "info": {
        "description": "Service capable of managing cryptographic keys and securing data at rest (metadata, BLOB)",
        "title": "CryptoVault Service API",
        "termsOfService": "TBD",
        "contact": {
            "name": "MGTheTrain",
            "url": "TBD",
            "email": "TBD"
        },
        "license": {
            "name": "LGPL-2.1 license",
            "url": "https://github.com/MGTheTrain/crypto-vault-service/blob/main/LICENSE"
        },
        "version": "v1"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/blobs": {
            "get": {
                "description": "Fetch a list of metadata for blobs based on query filters like name, size, type, and creation date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blob"
                ],
                "summary": "List blob metadata based on query parameters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blob Name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Blob Size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Blob Type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Blob Creation Date (RFC3339)",
                        "name": "dateTimeCreated",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset the results",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.BlobMetaResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponseDto"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponseDto"
                        }
                    }
                }
            },
            "post": {
                "description": "Upload a blob to the system with optional encryption and signing using the provided keys",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blob"
                ],
                "summary": "Upload a blob with optional encryption and signing",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Blob File",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Encryption Key ID",
                        "name": "encryption_key_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Sign Key ID",
                        "name": "sign_key_id",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.BlobMetaResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponseDto"
                        }
                    }
                }
            }
        },
        "/blobs/{id}": {
            "get": {
                "description": "Fetch the metadata of a specific blob by its unique ID, including its name, size, type, encryption and signing key IDs, and creation date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blob"
                ],
                "summary": "Retrieve metadata of a blob by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blob ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.BlobMetaResponseDto"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponseDto"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific blob and its associated metadata by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blob"
                ],
                "summary": "Delete a blob by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blob ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/v1.InfoResponseDto"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponseDto"
                        }
                    }
                }
            }
        },
        "/blobs/{id}/file": {
            "get": {
                "description": "Download the content of a specific blob by its ID, optionally decrypted with a provided decryption key ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Blob"
                ],
                "summary": "Download a blob by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blob ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Decryption Key ID",
                        "name": "decryption_key_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blob content",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponseDto"
                        }
                    }
                }
            }
        },
        "/keys": {
            "get": {
                "description": "Fetch a list of cryptographic key metadata based on filters like algorithm, type, and creation date, with pagination and sorting options.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key"
                ],
                "summary": "List cryptographic key metadata based on query parameters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cryptographic Algorithm",
                        "name": "algorithm",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Key Type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Key Creation Date (RFC3339)",
                        "name": "dateTimeCreated",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset the results",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by a specific field",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc/desc)",
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.CryptoKeyMetaResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponseDto"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponseDto"
                        }
                    }
                }
            },
            "post": {
                "description": "Generate cryptographic keys based on provided parameters and upload them to the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key"
                ],
                "summary": "Upload cryptographic keys and metadata",
                "parameters": [
                    {
                        "description": "Cryptographic Key Data",
                        "name": "requestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.UploadKeyRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.CryptoKeyMetaResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponseDto"
                        }
                    }
                }
            }
        },
        "/keys/{id}": {
            "get": {
                "description": "Fetch the metadata of a specific cryptographic key by its unique ID, including algorithm, key size, and creation date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key"
                ],
                "summary": "Retrieve metadata of a key by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CryptoKeyMetaResponseDto"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponseDto"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific cryptographic key and its associated metadata by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Key"
                ],
                "summary": "Delete a cryptographic key by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/v1.InfoResponseDto"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponseDto"
                        }
                    }
                }
            }
        },
        "/keys/{id}/file": {
            "get": {
                "description": "Download the content of a specific cryptographic key by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Key"
                ],
                "summary": "Download a cryptographic key by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cryptographic key content",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponseDto"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "v1.BlobMetaResponseDto": {
            "type": "object",
            "properties": {
                "dateTimeCreated": {
                    "type": "string"
                },
                "encryptionKeyID": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "signKeyID": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "v1.CryptoKeyMetaResponseDto": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "type": "string"
                },
                "dateTimeCreated": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "keyPairID": {
                    "type": "string"
                },
                "keySize": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "v1.ErrorResponseDto": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "v1.InfoResponseDto": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "v1.UploadKeyRequestDto": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "type": "string",
                    "enum": [
                        "AES",
                        "RSA",
                        "EC"
                    ]
                },
                "key_size": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": "Grants read and write access to administrative information"
            }
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": "Grants read and write access to administrative information",
                "write": "Grants write access"
            }
        },
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "scopes": {
                "admin": "Grants read and write access to administrative information",
                "write": "Grants write access"
            }
        },
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": "Grants read and write access to administrative information",
                "read": "Grants read access",
                "write": "Grants write access"
            }
        }
    }
}